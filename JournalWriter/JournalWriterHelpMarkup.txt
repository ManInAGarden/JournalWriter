
Markup in SJournal
===

Im folgenden wird erklärt wie die sog. Markdown-Syntax in SJournal genutzt werden kann um die Darstellung des Textes zu beeinflussen.

Überschriften schreibt man indem an eine Zeile Text mit mindestens drei Gleichheitsteichen oder Minuszeichen (Bindestriche) unterstreicht.

Das sieht dann so aus:

```
Überschrift 1. Ordnung
===
```

wird

Überschrift 1. Ordnung
===


und aus 

```
Überschrift 2. Ordnung
---
```

wird dies hier.

Überschrift 2. Ordnung
---

Man kann für Überschriften aber auch mit vorangestellten #-Zeichen arbeiten. Dabei bestimmt die Anzahl der #-Zeichen in welcher Ordnung sich die Überschrift befinden.
Also

```
# Überschrift 1. Ordnung
```

und

```
# Überschrift 2. Ordnung werden zu:
```

# Überschrift 1. Ordnung


und


## Überschrift 2. Ordnung

Damit kann man auch Überschriften bis zur 5. Ordnung anlegen. Also mit:


```
### 3. Ordnung
#### 4. Ordnung
##### 5. Ordnung
```

erhält man diese Überschriften:

### 3. Ordnung

#### 4. Ordnung

##### 5. Ordnung


Normalen Fließtext schreibt man einfach so runter. Man beginnt ganz links und schreibt seinen Text ohne Zeilenschaltungen einzufügen. Nur wenn man einen neuen Absatz beginnen möchte fügt man zwei Zeilenschaltungen ein. So entsteht auch im Texteditor der Eindruck von Absätzen.

So hier beginnt nun ein neuer Absatz. Geht doch!

Will man im Fließtext kursiven, fetten oder unterstrichenen Text haben geschieht dies indem man den Text in bestimmte steuernde Zeichen einschließt. Beispiele:

```
	*kursiv* - In Sternchen eingeschlossen
	**fett** - in Sternchenpaare eingeschlossen
	_unterstrichen_ - in Unterstrichzeichen eingeschlossen
```

Sieht so aus: *kursiv*, **fett**, _unterstrichen_


Zitate
---

Häufig möchte man Zitate anbringen. Dies geschieht einfach indem man die Zeile mit einen Größer-Zeichen beginnt. Das sieht dann so aus

```
>Der Krug geht zum Brunnen bis er bricht.
```

Und so sieht das im Text beim Lesen aus.

>Der Student geht zur Mensa bis er bricht.


Code-Blöcke
---

Ein Code-Block wird von der Formatierung ausgeschlossen und eingerückt mit einem Zeichensatz dargestellt bei dem alle Zeichen gleich breit sind.
Um dies zu erreichen gibt es zwei Möglichkeiten.

Triple-Backtick-Zeilen am Ende und am Anfang des Code-Blocks.


	```
	FOR I = 0 TO 10
	   PRINT I
	NEXT
	```

*Die Backtick-Zeichen sind rechts neben dem ß und mit Shift zu erreichen*

Dies wird dann zu:

```
FOR I=0 TO 10
	PRINT I
NEXT
```

Eine andere Methode benutzt TAB-Zeichen oder mindestens drei Leerzeichen zu Beginn jeder Zeile des Code Blocks. Dies benutzt man so:

[TAB]FOR I = 0 TO 10
[TAB]  PRINT I
[TAB]NEXT

Ergebnis:

	FOR I = 0 TO 10
	  PRINT I
	NEXT

**Achtung: Diese Methode ist viel schwieriger zu benutzen weil man TABS im Editor nicht sieht** Man kann zur Kontrolle TAB-Zeichen mit der Tastenkombination Ctr+T sichtbar machen und wieder unsichtbar schalten. Das hilft ein bisschen, dennoch ist die TAB-Methode nicht sehr empfehlenswert.

Listen
---

Listen kommen häufig vor wenn man etwas protokollieren möchte. Da gibt es zunächst Listen mit sog. Spiegelstrichen oder auf neudeutsch (Bullet-Listen)

Dafür schreibt man einfach ein kleines Sternchen vor jeden Punkt der Liste

```
* Erster Punkt
* Zweiter Punkt
* Dritter Punkt
```

wird zu 

* Erster Punkt
* Zweiter Punkt
* Dritter Punkt

Mit einem + (Pluszeichen) anstelle des Sternchens wird daraus eine Liste mit Quadraten als Spiegelstrich. Das sieht dann so aus

+ Erster Punkt
+ Zweiter Punkt
+ Dritter Punkt

Und mit - (Minuszeichen) erhalten wir eine Bulletliste ganz ohne irgendwelche Spiegelstrich-Zeichen. Das sieht dann so aus:

- Erster Punkt
- Zweiter Punkt
- Dritter Punkt

Nummerierte Liste erhält man indem man anstelle der Sternchen einfach eine Ziffer gefolgt von einem Punkt hinschreibt. So wird aus

```
:1. Erster Punkt
:2. Zweiter Punkt
:3. Dritter Punkt

Die Doppelpunkte bitte nicht mitchreiben.
```

dies hier

1. Erster Punkt
2. Zweiter Punkt
3. Dritter Punkt

Wenn man keine Lust hat wirklich zu zählen kann man hier auch einfach immer 0. schreiben. Der JournalWriter übernimmt ohnehin das Zählen.

```
:0. Erster Punkt
:0. Zweiter Punkt
:0. Dritter Punkt
```

wird zu 

0. Erster Punkt
0. Zweiter Punkt
0. Dritter Punkt

Schreibt man kleine oder große Buchstabem vor die Listenpunkte erhält man eine nummerierte Liste mit den großen oder den kleinen Buchstaben des Alphabets.
	
a. Erster Punkt
b. Zweiter Punkt
c. Dritter Punkt

oder auch:

A. Erster Punkt
B. Zweiter Punkt
C. Dritter Punkt


### Tabellen

Tabellen funktionieren so. Aus diesem Text der so ähnlich aus wie eine Tabelle

```
|Name                 |Genre         |      t 2015 /h| Rating |
|:--------------------|:-------------|--------------:|-------:|
|Radio fresh 80s      | Vintage Hits |           564 |      5 |
|Radio Paradise       | ?            |           132 |      5 |
|Krautrock Radio      | Deutsch-Rock |            17 |      4 | 
|laut/fm back in time | Vintage Hits |            39 |      3 |
```

wird:

|Name                 |Genre         |      t 2015 /h| Rating |
|:--------------------|:-------------|--------------:|-------:|
|Radio fresh 80s      | Vintage Hits |           564 |      5 |
|Radio Paradise       | ?            |           132 |      5 |
|Krautrock Radio      | Deutsch-Rock |            17 |      4 | 
|laut/fm back in time | Vintage Hits |            39 |      3 |

man beachte dabei die Trennline zwischen den Überschriften und dem Tabelleninhalt. Diese definiert auch wie der Text in den Zellen der
betreffenden Spalte angeordnet wird.

Die Definition `|:---` sorgt für linksbündige Anordnung des Textes, `----:|` dagen für rechstbündiges und ein Doppelpunkt auf beiden 
Seiten wie in `|:------:|` lässt den Text zentriert erscheinen.